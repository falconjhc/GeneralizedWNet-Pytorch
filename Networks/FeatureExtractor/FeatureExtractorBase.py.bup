import sys
import torch
import torchvision.models as models
import torch.nn as nn
sys.path.append('./')
from config import CONFIG as cfg

class FeatureExtractor(nn.Module):
    def __init__(self, output_nums):
        super(FeatureExtractor, self).__init__()
        # 加载预训练的VGG16模型
        self.vgg16 = models.vgg16()
        self.vgg16.classifier[6] = nn.Linear(4096,output_nums)
        self.vgg16_blocks = [3,8,15,22,29]
    def forward(self, x):
        intermediate_outputs = []
        # 将灰度图像的单通道复制到三个通道
        x = x.repeat(1, 3, 1, 1)
        # 注册钩子以获取每个特征层的输出,需要提取3，8，15，22，29
        for idx,layer in enumerate(self.vgg16.features):
            x = layer(x)
            if idx in self.vgg16_blocks:
                intermediate_outputs.append(x)
        # 继续通过分类器部分
        x = self.vgg16.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.vgg16.classifier(x)
        return x,intermediate_outputs

    
if __name__ == '__main__':
    x = torch.randn(16,1,64,64)
    Content_Extractor = FeatureExtractor(output_nums=3755)
    content_extractor_ckpt = cfg['content_extractor_ckpt']
    Content_Extractor.load_state_dict(torch.load(content_extractor_ckpt))


    print(x.shape)
    x,intermediate_outputs = Content_Extractor(x)
    print(x.shape)